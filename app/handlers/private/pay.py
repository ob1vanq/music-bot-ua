import re

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import ChatTypeFilter, CommandStart
from aiogram.types import Message, ChatType, ContentType, CallbackQuery, \
    MediaGroup, InputMediaAudio

from app.config import Config
from app.handlers.private.start import command_start
from app.keyboards.inline.pay import pay_tracks_kb, pay_track_cb, admin_pay_check_kb, admin_pay_check_cb, chat_cb
from app.keyboards.reply.pay import pay_kb
from app.keyboards.reply.post import confirm_kb, cancel_kb, send_kb
from app.services.repos import TrackRepo, PostRepo, Track, SubscriptRepo, UserRepo
from app.states.pay import PaySG

PAY_REGEX = re.compile(r'pay-(\d+)')


async def chose_track(msg: Message, deep_link: re.Match,  track_db: TrackRepo, sub_db: SubscriptRepo, state: FSMContext):
    post_id = int(deep_link.groups()[-1])
    tracks = await track_db.get_tracks_by_post_id(post_id)
    sub = await sub_db.get_sub_by_user_id(msg.from_user.id)
    if sub.status:
        await msg.answer('–í–∞—Ä—Ç—ñ—Å—Ç—å —Ç—Ä–µ–∫—É –≤—Ö–æ–¥–∏—Ç—å –≤ –ø—ñ–¥–ø–∏—Å–∫—É.\n–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ä—ñ–±–Ω–∏–π –∞—É–¥—ñ–æ–∑–∞–ø–∏—Å üëá',
                         reply_markup=pay_tracks_kb(tracks))
    else:
        await msg.answer(
            '–û–ø–ª–∞—Ç—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç—Ä–µ–∫—É, –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —è–∫—â–æ —É –≤–∞—Å —î "<b>–ü—ñ–¥–ø–∏—Å–∫–∞</b> üí∏"',
            reply_markup=pay_tracks_kb(tracks)
        )


async def send_payment(call: CallbackQuery, callback_data: dict, track_db: TrackRepo,
                       state: FSMContext, sub_db: SubscriptRepo, user_db: UserRepo):
    track_id = int(callback_data.get('track_id'))
    track = await track_db.get_tracks_by_track_id(track_id)

    sub = await sub_db.get_sub_by_user_id(call.from_user.id)
    if sub.status:
        media = MediaGroup([InputMediaAudio(track.file_id)])
        await call.bot.send_media_group(
            chat_id=call.from_user.id, media=media
        )
        await state.finish()
        await command_start(call.message, user_db, sub_db)
        return

    await call.message.answer('–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–ø–ª–∞—Ç–∏', reply_markup=pay_kb)
    await state.update_data(track_id=track.track_id)
    await PaySG.Pay.set()


async def card_payment(msg: Message, config: Config, state: FSMContext, track_db: TrackRepo):
    data = await state.get_data()
    track_id = int(data['track_id'])
    track = await track_db.get_tracks_by_track_id(track_id)

    text = (
        f'–ù–∞—à—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –∑–∞ –∫–∞—Ä—Ç–æ—é\nüí≥ <code>{config.payment.card}</code>\n\n'
        f'–¢—Ä–µ–∫: <b>{track.title}</b>\n'
        f'–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: {track.price} –≥—Ä–Ω\n\n'
        f'–ü—Ä–æ–≤–µ–¥—ñ—Ç—å –æ–ø–ª–∞—Ç—É —Ç–∞ –Ω–∞–¥—ñ–ª—à–ª—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—á–µ —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω—à–æ—Ç)'
    )
    await msg.answer(text=text, reply_markup=cancel_kb)
    await state.update_data(method='–±–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∞')
    await PaySG.Photo.set()


async def paypal_payment(msg: Message, state: FSMContext, config: Config, track_db: TrackRepo):
    data = await state.get_data()
    track_id = int(data['track_id'])
    track = await track_db.get_tracks_by_track_id(track_id)

    text = (
        f'–ù–∞—à—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –∑–∞ PayPal\nüí≥ <code>üí∏ {config.payment.paypal}</code>\n'
        f'–¢—Ä–µ–∫: <b>{track.title}</b>\n'
        f'–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: {track.price} –≥—Ä–Ω\n\n'
        f'–ü—Ä–æ–≤–µ–¥—ñ—Ç—å –æ–ø–ª–∞—Ç—É —Ç–∞ –Ω–∞–¥—ñ–ª—à–ª—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—á–µ —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω—à–æ—Ç)'
    )
    await msg.answer(text=text, reply_markup=cancel_kb)
    await state.update_data(method='PayPal')
    await PaySG.Photo.set()


async def save_screenshot(msg: Message, state: FSMContext):
    await state.update_data(photo_id=msg.photo[-1].file_id)
    await msg.reply('–§–æ—Ç–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ')
    await msg.answer('–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–æ–≤–Ω–µ –ü–Ü–ë (–ø—Ä–∏–∫–ª–∞–¥ –Ü–≤–∞–Ω –Ø–∫–æ–≤–∏—á –§—Ä–∞–Ω–∫–æ)')
    await PaySG.Name.set()


async def preview_pay_order(msg: Message, state: FSMContext, track_db: TrackRepo):
    data = await state.get_data()
    track_id = int(data['track_id'])
    method = data['method']
    photo_id = data['photo_id']
    track = await track_db.get_tracks_by_track_id(track_id)

    to_admin = (
        f'üíµ –ü–ª–∞—Ç—ñ–∂ –≤—ñ–¥ [{msg.from_user.get_mention()}]\n'
        f'–ü–Ü–ë: <b>{msg.text}</b>\n\n'
        f'–û–ø–ª–∞—Ç–∞: {method}\n'
        f'–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: {track.price} –≥—Ä–Ω\n'
        f'–¢—Ä–µ–∫: <b>{track.title}</b>'
    )
    await state.update_data(to_admin=to_admin)
    await msg.bot.send_photo(chat_id=msg.from_user.id, photo=photo_id, caption=to_admin, reply_markup=send_kb)
    await PaySG.Send.set()


async def send_to_admin(msg: Message, state: FSMContext, config: Config):
    data = await state.get_data()
    to_admin = data['to_admin']
    photo_id = data['photo_id']
    track_id = int(data['track_id'])

    reply_markup = admin_pay_check_kb(user_id=msg.from_user.id, track_id=track_id, user_url=msg.from_user.url)
    for admin_id in config.bot.admin_ids:
        await msg.bot.send_photo(chat_id=admin_id, photo=photo_id, caption=to_admin, reply_markup=reply_markup)
    await msg.answer('–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø—É! –í–∞—à—ñ –¥–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É')
    await state.finish()


async def admin_answer(call: CallbackQuery, track_db: TrackRepo, callback_data: dict):
    action = callback_data['action']
    user_id = int(callback_data['user_id'])
    track_id = int(callback_data['track_id'])
    track = await track_db.get_tracks_by_track_id(track_id)
    call.message.from_user.get_mention()

    url = f'tg://user?id={user_id}'

    caption = call.message.caption
    if action == 'confirm':
        media = MediaGroup([InputMediaAudio(track.file_id)])
        await call.bot.send_message(chat_id=user_id, text='\n\n–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ')
        await call.bot.send_media_group(chat_id=user_id, media=media)
        await call.message.edit_caption(caption=caption + '\n\n–û–ø–µ—Ä–∞—Ü—ñ—è: ‚úÖ –ø–ª–∞—Ç—ñ–∂ —Å—Ö–≤–∞–ª–µ–Ω–æ', reply_markup=chat_cb(url))
    else:
        await call.message.edit_caption(caption=caption + '\n\n–û–ø–µ—Ä–∞—Ü—ñ—è: ‚ùå –ø–ª–∞—Ç—ñ–∂ —Å–∫–∞—Å–æ–≤–∞–Ω–æ')
        await call.bot.send_message(chat_id=user_id, text='–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è —Å–∫–∞—Å—É–≤–∞–ª–∞ –≤–∞—à –ø–ª–∞—Ç—ñ–∂', reply_markup=chat_cb(url))


def setup(dp: Dispatcher):
    dp.register_message_handler(chose_track, CommandStart(PAY_REGEX), state='*')
    dp.register_callback_query_handler(send_payment, pay_track_cb.filter(), state='*')
    dp.register_message_handler(card_payment, text='üí≥ –ü–ª–∞—Ç—ñ–∂ –∑–∞ –∫–∞—Ä—Ç–æ—é', state=PaySG.Pay)
    dp.register_message_handler(paypal_payment, text='üí∏ PayPal', state=PaySG.Pay)
    dp.register_message_handler(save_screenshot, content_types=ContentType.PHOTO, state=PaySG.Photo)
    dp.register_message_handler(preview_pay_order, state=PaySG.Name)
    dp.register_message_handler(send_to_admin, state=PaySG.Send)

    dp.register_callback_query_handler(admin_answer, admin_pay_check_cb.filter(), state='*')




