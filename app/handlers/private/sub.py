import asyncio
import datetime

from aiogram import Dispatcher, Bot
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import Message, CallbackQuery, LabeledPrice, ContentType
from aiogram.utils.markdown import hide_link

from app.config import Config
from app.filters.admin import IsAdminFilter
from app.handlers.private.start import command_start
from app.keyboards.inline.pay import chat_cb
from app.keyboards.inline.sub import *
from app.keyboards.inline.sub import admin_sub_check_kb, admin_sub_check_cb
from app.keyboards.reply.pay import pay_kb
from app.keyboards.reply.post import cancel_kb, send_kb
from app.models.subscriprion import Subscription
from app.services.repos import SubscriptRepo, UserRepo
from app.states.pay import SubPaySG
from app.states.sub import SubSG

strfrime = '%d.%m.%Y'
thirty = datetime.timedelta(days=30)


async def check_sub(msg: Message, sub_db: SubscriptRepo, config: Config):
    sub = await sub_db.get_sub_by_user_id(msg.from_user.id)
    if sub.status:
        next_pay = sub.last_paid + thirty
        text = (
            '–í–∏ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø—ñ–¥–ø–∏—Å–∫—É\n\n'
            f'<b>–û—Å—Ç–∞–Ω–Ω—ñ–π –ø–ª–∞—Ç—ñ–∂</b>: {sub.last_paid.strftime(strfrime)}\n'
            f'<b>–ù–∞—Å—Ç—É–ø–Ω–∏–π –ø–ª–∞—Ç—ñ–∂</b>: {next_pay.strftime(strfrime)}\n'
        )
        await msg.answer(text=text, reply_markup=stop_sub_kb(msg.from_user.id))
    else:
        link = config.misc.telegraph_url
        text = (
            '–í–∏ <b>–Ω–µ –æ—Ñ–æ—Ä–º–∏–ª–∏</b> –ø—ñ–¥–ø–∏—Å–∫—É\n\n'
            f'üî∏ <a href="{link}">–ß–æ–º—É –ø—ñ–¥–ø–∏—Å–∫–∞ —Ü–µ –∑—Ä—É—á–Ω–æ?</a>\n\n'
            '–ë–∞–∂–∞—î—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É?'
        )
        await msg.answer(text=text, reply_markup=start_sub_kb(msg.from_user.id))


async def send_sub_payment(call: CallbackQuery):
    await call.message.answer('–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–ø–ª–∞—Ç–∏', reply_markup=pay_kb)
    await SubPaySG.Pay.set()


async def card_sub_payment(msg: Message, config: Config, state: FSMContext):
    data = await state.get_data()

    text = (
        f'–ù–∞—à—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –∑–∞ –∫–∞—Ä—Ç–æ—é\nüí≥ <code>{config.payment.card}</code>\n\n'
        f'–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: {config.misc.sub_price} –≥—Ä–Ω\n\n'
        f'–ü—Ä–æ–≤–µ–¥—ñ—Ç—å –æ–ø–ª–∞—Ç—É —Ç–∞ –Ω–∞–¥—ñ–ª—à–ª—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—á–µ —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω—à–æ—Ç)'
    )
    await msg.answer(text=text, reply_markup=cancel_kb)
    await state.update_data(method='–±–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∞')
    await SubPaySG.Photo.set()


async def paypal_sub_payment(msg: Message, state: FSMContext, config: Config):
    text = (
        f'–ù–∞—à—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –∑–∞ PayPal\nüí≥ <code>üí∏ {config.payment.paypal}</code>\n'
        f'–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: {config.misc.sub_price} –≥—Ä–Ω\n\n'
        f'–ü—Ä–æ–≤–µ–¥—ñ—Ç—å –æ–ø–ª–∞—Ç—É —Ç–∞ –Ω–∞–¥—ñ–ª—à–ª—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—á–µ —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω—à–æ—Ç)'
    )
    await msg.answer(text=text, reply_markup=cancel_kb)
    await state.update_data(method='PayPal')
    await SubPaySG.Photo.set()


async def preview_sub_pay_order(msg: Message, state: FSMContext, config: Config):
    data = await state.get_data()
    method = data['method']
    photo_id = data['photo_id']

    to_admin = (
        f'üíµ –ü–ª–∞—Ç—ñ–∂ –≤—ñ–¥ [{msg.from_user.get_mention()}]\n'
        f'–ü–Ü–ë: <b>{msg.text}</b>\n\n'
        f'–û–ø–ª–∞—Ç–∞: {method}\n'
        f'–û–ø–ª–∞—Ç–∞ –ø—ñ–¥–ø–∏—Å–∫–∏: {config.misc.sub_price} –≥—Ä–Ω\n'
    )
    await state.update_data(to_admin=to_admin)
    await msg.bot.send_photo(chat_id=msg.from_user.id, photo=photo_id, caption=to_admin, reply_markup=send_kb)
    await SubPaySG.Send.set()


async def save_sub_screenshot(msg: Message, state: FSMContext):
    await state.update_data(photo_id=msg.photo[-1].file_id)
    await msg.reply('–§–æ—Ç–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ')
    await msg.answer('–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–æ–≤–Ω–µ –ü–Ü–ë (–ø—Ä–∏–∫–ª–∞–¥ –Ü–≤–∞–Ω –Ø–∫–æ–≤–∏—á –§—Ä–∞–Ω–∫–æ)')
    await SubPaySG.Name.set()


async def send_sub_to_admin(msg: Message, state: FSMContext, config: Config):
    data = await state.get_data()
    to_admin = data['to_admin']
    photo_id = data['photo_id']

    reply_markup = admin_sub_check_kb(user_url=msg.from_user.url, user_id=msg.from_user.id)
    for admin_id in config.bot.admin_ids:
        await msg.bot.send_photo(chat_id=admin_id, photo=photo_id, caption=to_admin, reply_markup=reply_markup)
    await msg.answer('–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø—É! –í–∞—à—ñ –¥–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É')
    await state.finish()


async def stop_sub(call: CallbackQuery, sub_db: SubscriptRepo, user_db: UserRepo):
    await sub_db.update_subscript(call.from_user.id, status=False)
    await call.message.answer('–ü—ñ–¥–ø–∏—Å–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞')
    await call.message.delete_reply_markup()
    await command_start(call.message, user_db, sub_db)


async def admin_sub_answer(call: CallbackQuery, callback_data: dict, config: Config, sub_db: SubscriptRepo):
    action = callback_data['action']
    user_id = int(callback_data['user_id'])
    call.message.from_user.get_mention()

    url = f'tg://user?id={user_id}'

    caption = call.message.caption
    if action == 'confirm':
        text = (
            '–û–ø–ª–∞—Ç–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!\n'
            '–í–∞–º –≤—ñ–¥–∫—Ä–∏—Ç–æ –¥–æ—Å—Ç—É–ø –¥–æ –∫–∞–Ω–∞–ª—É –∑ –ø–ª–∞—Ç–Ω–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º\n\n'
            f'{config.misc.sub_channel_url}'
        )
        await sub_db.update_subscript(user_id, status=True)
        await sub_db.update_date_by_user_id(call.from_user.id)
        await call.bot.send_message(chat_id=user_id, text=text)
        await call.message.edit_caption(caption=caption + '\n\n–û–ø–µ—Ä–∞—Ü—ñ—è: ‚úÖ –ø–ª–∞—Ç—ñ–∂ —Å—Ö–≤–∞–ª–µ–Ω–æ', reply_markup=chat_cb(url))
    else:
        await call.message.edit_caption(caption=caption + '\n\n–û–ø–µ—Ä–∞—Ü—ñ—è: ‚ùå –ø–ª–∞—Ç—ñ–∂ —Å–∫–∞—Å–æ–≤–∞–Ω–æ', reply_markup=chat_cb(url))
        await call.bot.send_message(chat_id=user_id, text='–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è —Å–∫–∞—Å—É–≤–∞–ª–∞ –≤–∞—à –ø–ª–∞—Ç—ñ–∂')


def setup(dp: Dispatcher):
    # dp.register_message_handler(check_subs, Command('start'), IsAdminFilter(), state='*')
    dp.register_message_handler(check_sub, text='–ü—ñ–¥–ø–∏—Å–∫–∞ üí∏', state='*')
    dp.register_callback_query_handler(send_sub_payment, start_sub_cb.filter(), state='*')
    dp.register_message_handler(card_sub_payment, text='üí≥ –ü–ª–∞—Ç—ñ–∂ –∑–∞ –∫–∞—Ä—Ç–æ—é', state=SubPaySG.Pay)
    dp.register_message_handler(paypal_sub_payment, text='üí∏ PayPal', state=SubPaySG.Pay)
    dp.register_message_handler(save_sub_screenshot, content_types=ContentType.PHOTO, state=SubPaySG.Photo)
    dp.register_message_handler(preview_sub_pay_order, state=SubPaySG.Name)
    dp.register_message_handler(send_sub_to_admin, state=SubPaySG.Send)

    dp.register_callback_query_handler(stop_sub, stop_sub_cb.filter(), state='*')

    dp.register_callback_query_handler(admin_sub_answer, admin_sub_check_cb.filter(), state='*')


def _payments_param(sub: Subscription, config: Config):
    return dict(
        description='–ü—ñ–¥–ø–∏—Å–∫–∞',
        payload=str(sub.user_id) + str(sub.sub_id),
        provider_token=config.bot.provider_token,
        prices=_return_prices(config.misc.sub_price),
        title='–û–ø–ª–∞—Ç–∞ –ø—ñ–¥–ø–∏—Å–∫–∏',
        currency='UAH'
    )


def _return_prices(price: int) -> list[LabeledPrice]:
    return [
        LabeledPrice('–û–ø–ª–∞—Ç–∞ –ø—ñ–¥–ø–∏—Å–∫–∏', price * 100)
    ]
